/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

// GLOBE as RA(ESC) via double tap + remapping in Karabiner / mouse pointer, scrolling and keys via remapping in Karabiner
// WIN-Layer oriented towards US INTL while MAC-Layer is DE

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define NAV_L 2
#define SYS_L 3
#define NUM_R 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
  macros {
        mouse_l: mouse_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp J>
		, <&macro_pause_for_release>
		, <&macro_release &kp J>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_u: mouse_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp I>
		, <&macro_pause_for_release>
		, <&macro_release &kp I>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_d: mouse_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp K>
		, <&macro_pause_for_release>
		, <&macro_release &kp K>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_r: mouse_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp L>
		, <&macro_pause_for_release>
		, <&macro_release &kp L>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_sd: mouse_sd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp H>
		, <&macro_pause_for_release>
		, <&macro_release &kp H>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_su: mouse_su {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp Y>
		, <&macro_pause_for_release>
		, <&macro_release &kp Y>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_sl: mouse_sl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp O>
		, <&macro_pause_for_release>
		, <&macro_release &kp O>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_sr: mouse_sr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp P>
		, <&macro_pause_for_release>
		, <&macro_release &kp P>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_lbtn: mouse_lbtn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp SPACE>
		, <&macro_pause_for_release>
		, <&macro_release &kp SPACE>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
	mouse_rbtn: mouse_rbtn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp CAPSLOCK>
		, <&macro_press &kp RGUI>
		, <&macro_pause_for_release>
		, <&macro_release &kp RGUI>
                , <&macro_release &kp CAPSLOCK>
                ;
        };
    };
    
    behaviors {
	td0: hyphen_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_HYPHY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LBKT>, <&kp NON_US_HASH>;
	};
	td1: space_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SPACY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp SPACE>, <&kp RET>;
	};
	td2: bksp_mod_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_BACKSPACY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp BKSP>, <&mt RA(ESC) ESC>;
	};
	td3: mousebutton_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_MOUSY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&mouse_lbtn>, <&mouse_rbtn>;
	};
	td4: windowswitch_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SWITCHY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp TAB>, <&kp LG(LS(EQUAL))>;
	};
	td5: option_control {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_OPTCONT";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LALT>, <&kp LCTRL>;
	};
	par: paranthesis_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_PAR";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LS(N8)>, <&kp LS(N9)>;
	};
	sqr: sqrbracket_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SQR";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LA(N5)>, <&kp LA(N6)>;
	};
	ptd: ptdbracket_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_PTD";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp GRAVE>, <&kp LS(GRAVE)>;
	};
	crly: crlybracket_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_CRLY";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LA(N8)>, <&kp LA(N9)>;
	};
	accent: accent_tap_dance {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_ACNT";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LS(EQUAL)>, <&kp EQUAL>;
	};
	td0_w: hyphen_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_HYPHY_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp RA(Y)>, <&kp RA(S)>;
	};
	td1_w: space_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SPACY_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp SPACE>, <&kp RET>;
	};
	td2_w: bksp_mod_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_BACKSPACY_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp BKSP>, <&mt RA(ESC) ESC>;
	};
	td4_w: windowswitch_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SWITCHY_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp TAB>, <&kp LG(GRAVE)>;
	};
	td5_w: option_control_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_OPTCONT_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp RALT>, <&kp RCTRL>;
	};
	par_w: parenthesis_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_PAR_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LPAR>, <&kp RPAR>;
	};
	sqr_w: sqrbracket_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_SQR_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LBKT>, <&kp RBKT>;
	};
	ptd_w: ptdbracket_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_PTD_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;
	};
	crly_w: crlybracket_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_CRLY_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp LBRC>, <&kp RBRC>;
	};
	accent_w: accent_tap_dance_w {
		compatible = "zmk,behavior-tap-dance";
		label = "TD_ACNT_w";
		#binding-cells = <0>;
		tapping-term-ms = <200>;
		bindings = <&kp GRAVE>, <&kp LS(GRAVE)>;
	};
    };

  combos {
        compatible = "zmk,combos";
	combo_sys {
            timeout-ms = <50>;
            key-positions = <37 48>;
            bindings = <&mo SYS_L>;
	    layers = <0 1>;
        };
	combo_num {
            timeout-ms = <50>;
            key-positions = <46 47>;
            bindings = <&mo NUM_R>;
	    layers = <0 1>;
        };
	combo_ret {
            timeout-ms = <50>;
            key-positions = <19 22>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp RET>;
	    layers = <0 1>;
        };
	combo_capsword {
            timeout-ms = <50>;
            key-positions = <24 37>;
            bindings = <&caps_word>;
	    layers = <0 1>;
        };
	combo_backword {
            timeout-ms = <50>;
            key-positions = <43 46>;
            bindings = <&kp LA(BKSP)>;
	    layers = <0 1>;
        };
	combo_snglqt {
            timeout-ms = <50>;
            key-positions = <5 6>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp LS(BSLH)>;
	    layers = <0>;
        };
	combo_slsh {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp LS(N7)>;
	    layers = <0>;
        };
	combo_vert {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp LA(N7)>;
	    layers = <0>;
        };
	combo_bkslsh {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp LA(LS(N7))>;
	    layers = <0>;
        };
	combo_deg {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LS(NUBS)>;
	    layers = <0>;
        };
	combo_star {
            timeout-ms = <50>;
	    require-prior-idle-ms = <175>;
            key-positions = <14 15>;
            bindings = <&kp LS(RBKT)>;
	    layers = <0>;
        };
	combo_plus {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp RBKT>;
	    layers = <0>;
        };
	combo_dblqt {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LS(N2)>;
	    layers = <0>;
        };
	combo_par {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&par>;
	    layers = <0>;
        };
	combo_sqr {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&sqr>;
	    layers = <0>;
        };
	combo_ptd {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&ptd>;
	    layers = <0>;
        };
	combo_crly {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&crly>;
	    layers = <0>;
        };
	combo_circ {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp NUBS>;
	    layers = <0>;
        };
	combo_prct {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LS(N5)>;
	    layers = <0>;
        };
	combo_hash {
            timeout-ms = <50>;
	    require-prior-idle-ms = <175>;
            key-positions = <26 27>;
            bindings = <&kp BSLH>;
	    layers = <0>;
        };
	combo_amprsnd {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp LS(N6)>;
	    layers = <0>;
        };
	combo_acnt {
            timeout-ms = <50>;
            key-positions = <29 32>;
            bindings = <&accent>;
	    layers = <0>;
        };
	combo_em {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp LA(SLASH)>;
	    layers = <0>;
        };
	combo_excl {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp LS(N1)>; 
	    layers = <0>;
        };
	combo_qstn {
            timeout-ms = <50>;
            key-positions = <35 36>;
            bindings = <&kp LS(NUHS)>;
	    layers = <0>;
        };
	combo_eqls {
            timeout-ms = <50>;
            key-positions = <36 37>;
            bindings = <&kp LS(N0)>;
	    layers = <0>;
        };
	combo_snglqt_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <5 6>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp APOS>;
        };
	combo_slsh_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp SLASH>;
        };
	combo_vert_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <8 9>;
	    bindings = <&kp PIPE>;
        };
	combo_bkslsh_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp BSLH>;
        };
	combo_deg_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LS(NUBS)>;
        };
	combo_star_w {
	    layers = <1>;
            timeout-ms = <50>;
	    require-prior-idle-ms = <175>;
            key-positions = <14 15>;
            bindings = <&kp ASTRK>;
        };
	combo_plus_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp PLUS>;
        };
	combo_dblqt_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp DQT>;
        };
	combo_par_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&par_w>;
        };
	combo_sqr_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&sqr_w>;
        };
	combo_ptd_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&ptd_w>;
        };
	combo_crly_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&crly_w>;
        };
	combo_circ_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp CARET>;
        };
	combo_prct_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp PERCENT>;
        };
	combo_hash_w {
	    layers = <1>;
            timeout-ms = <50>;
	    require-prior-idle-ms = <175>;
            key-positions = <26 27>;
            bindings = <&kp HASH>;
        };
	combo_amprsnd_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp AMPS>;
        };
	combo_acnt_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <29 32>;
            bindings = <&accent_w>;
        };
	combo_em_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp LA(MINUS)>;
        };
	combo_excl_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp EXCL>;
        };
	combo_qstn_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <35 36>;
            bindings = <&kp QMARK>;
        };
	combo_eqls_w {
	    layers = <1>;
            timeout-ms = <50>;
            key-positions = <36 37>;
            bindings = <&kp EQUAL>;
        };

// numbers combos
	combo_seven {
            timeout-ms = <50>;
            key-positions = <4 7>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N7>;
        };
	combo_eight {
            timeout-ms = <50>;
            key-positions = <3 8>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N8>;
        };
	combo_nine {
            timeout-ms = <50>;
            key-positions = <2 9>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N9>;
        };
	combo_zerotop {
            timeout-ms = <50>;
            key-positions = <1 10>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N0>;
        };
	combo_four {
            timeout-ms = <50>;
            key-positions = <16 19>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N4>;
        };
	combo_five {
            timeout-ms = <50>;
            key-positions = <15 20>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N5>;
        };
	combo_six {
            timeout-ms = <50>;
            key-positions = <14 21>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N6>;
        };
	combo_zeromiddle {
            timeout-ms = <50>;
            key-positions = <13 22>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N0>;
        };
	combo_one {
            timeout-ms = <50>;
            key-positions = <28 33>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N1>;
        };
	combo_two {
            timeout-ms = <50>;
            key-positions = <27 34>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N2>;
        };
	combo_three {
            timeout-ms = <50>;
            key-positions = <26 35>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N3>;
        };
	combo_zerobottom {
            timeout-ms = <50>;
            key-positions = <25 36>;
	    require-prior-idle-ms = <175>;
            bindings = <&kp N0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        macbase_layer {
            label = "Macbase";
            bindings = <
 &td4    	&kp Q   &kp W      &kp E      &kp R       &kp T                   &kp Y    &kp U       &kp I       &kp O      &kp P      &td0
 &mo NAV_L  	&kp A   &kp S      &kp D      &kp F       &kp G                   &kp H    &kp J       &kp K       &kp L      &kp SEMI  &lt NAV_L QUOT
 &kp LSHFT  	&kp Z   &kp X      &kp C      &kp V       &kp B    &none &none    &kp N    &kp M       &kp COMMA   &kp DOT    &kp FSLH  &kp RSHIFT
 &none      	&none   &none      &td5   &kp LGUI &lt NUM_R BKSP  &none &none    &td1     &kp RGUI    &td5   	   &none      &none 	 &none 
            >;
        };

	winbase_layer {
            label = "Winbase";
            bindings = <
 &td4_w    	&kp Q   &kp W      &kp E      &kp R       &kp T                   &kp Z    &kp U       &kp I       &kp O      &kp P      &td0_w
 &mo NAV_L  	&kp A   &kp S      &kp D      &kp F       &kp G                   &kp H    &kp J       &kp K       &kp L      &kp RA(P)  &lt NAV_L RA(Q)
 &kp LSHFT  	&kp Y   &kp X      &kp C      &kp V       &kp B    &none &none    &kp N    &kp M       &kp COMMA   &kp DOT    &kp MINUS  &kp RSHIFT
 &none      	&none   &none      &td5_w   &kp LGUI &lt NUM_R BKSP  &none &none    &td1_w     &kp RGUI    &td5_w   	   &none      &none 	 &none 
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&trans	   &trans     &trans     &kp UP      &trans               &kp PG_UP                  &mouse_su     &trans       &mouse_u      &mouse_sl  &mouse_sr  &trans
&trans     &trans     &kp LEFT   &kp DOWN    &kp RIGHT            &kp PG_DN                  &mouse_sd     &mouse_l     &mouse_d      &mouse_r   &kp RALT   &trans
&trans     &trans     &trans  	 &trans      &kp LG(LEFT)         &kp LG(RIGHT) &none &none  &kp BKSP      &kp DEL      &trans        &trans     &trans     &trans
&none      &none      &none      &trans      &mt LA(LSHIFT) BKSP  &kp HOME      &none &none  &kp END       &td3         &trans        &none      &none      &none 
            >;
        };

        sys_layer {
            label = "Sys";
            bindings = <
&bootloader  &sys_reset  &tog WIN 	&trans 	&trans    &trans              	&bt BT_CLR    	&bt BT(0)  	&bt BT(1)   &bt BT(2)    &bt BT(3)  &bt BT(4)
&kp F1       &kp F2   	 &kp F3 	&kp F4 	&kp F5    &kp F6               	&kp F7    	&kp F8     	&kp F9      &kp F10      &kp F11    &kp F12
&trans       &trans	 &trans 	&trans 	&trans    &trans   &none &none  &trans    	&trans	 	&trans      &trans       &trans     &trans
&none        &none  	 &none  	&trans  &trans    &trans   &none &none  &trans    	&out OUT_TOG  	&trans      &none        &none      &none 
            >;
        };

num2_layer {
            label = "Num2";
            bindings = <
&mt RA(ESC) ESC &trans  &trans 	&trans 	&trans    &trans             	 &kp ASTRK	&kp N7     &kp N8      &kp N9       &kp SLASH 	&trans
&trans     	&trans	&trans 	&trans 	&trans    &trans                 &kp MINUS  	&kp N4     &kp N5      &kp N6       &kp N0     	&trans
&trans     	&trans	&trans 	&trans 	&trans    &trans  &none &none    &kp PLUS    	&kp N1     &kp N2      &kp N3       &kp EQUAL 	&trans
&none       	&none   &none   &trans  &trans    &trans  &none &none    &trans       	&trans     &trans     &none         &none       &none 
            >;
        };

    };
};
